{"version":3,"sources":["User.tsx","Todo.tsx","TodoList.tsx","App.tsx","api.ts","index.tsx"],"names":["User","user","className","name","Todo","todo","title","completed","TodoList","todos","map","App","useState","setTodos","isLoaded","setLoaded","isLoading","setLoading","href","onClick","sortedTodos","sort","todoPrew","todoCurr","localeCompare","type","updateTotos","Promise","all","fetch","then","response","json","data","find","id","userId","loadAllTodos","setTimeout","ReactDOM","render","document","getElementById"],"mappings":"sOAOaA,EAAwB,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OACnC,wBAAIC,UAAU,SACXD,EAAKE,OCDGC,EAAwB,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAC9BC,EAA2BD,EAA3BC,MAAOC,EAAoBF,EAApBE,UAAWN,EAASI,EAATJ,KAE1B,OACE,oCACE,wBAAIC,UAAU,SAASI,GACvB,wBAAIJ,UAAU,UAAWK,EAAa,MAAQ,MAC9C,kBAAC,EAAD,CAAMN,KAAMA,MCPLO,EAA4B,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAC1C,OACE,oCACGA,EAAMC,KAAI,SAAAL,GAAI,OACb,wBAAIH,UAAU,QACZ,kBAAC,EAAD,CAAMG,KAAMA,UCkEPM,G,MAxEO,WAAO,IAAD,EACAC,mBAAuB,IADvB,mBACnBH,EADmB,KACZI,EADY,OAEID,oBAAS,GAFb,mBAEnBE,EAFmB,KAETC,EAFS,OAGMH,oBAAS,GAHf,mBAGnBI,EAHmB,KAGRC,EAHQ,KAmD1B,OACE,oCACE,qDACEH,EAKA,2BAAOZ,UAAU,OACf,4BACE,4BAAI,uBAAGgB,KAAK,UAAUC,QAlCR,WACtB,IAAMC,EAAc,YAAIX,GAAOY,MAAK,SAACC,EAAUC,GAAX,OACjCD,EAAShB,MAAOkB,cAAcD,EAASjB,UAG1CO,EAASO,KA6BG,UACJ,4BAAI,uBAAGF,KAAK,cAAcC,QA3BZ,WACtB,IAAMC,EAAc,YAAIX,GAAOY,MAAK,SAAChB,GAAD,QAC/BA,EAAKE,aAGVM,EAASO,KAsBG,iBACJ,4BAAI,uBAAGF,KAAK,UAAUC,QApBT,WACrB,IAAMC,EAAc,YAAIX,GAAOY,MAAK,SAACC,EAAUC,GAAX,OACjCD,EAASrB,KAAKE,KAAMqB,cAAcD,EAAStB,KAAKE,SAGnDU,EAASO,KAeG,WAEN,kBAAC,EAAD,CAAUX,MAAOA,KAVnB,4BAAQgB,KAAK,SAASN,QArCN,WACpBF,GAAW,GAdQ,WACnB,IAAIS,EAA4B,GAEhCC,QAAQC,IAAI,CCTPC,MAAM,8CACVC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UANtBH,MAAM,8CACVC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,YDcxBF,MAAK,SAAAG,GACJP,EAAcO,EAAK,GAAGvB,KAAI,SAACL,GAAD,mBAAC,eACtBA,GADqB,IACfJ,KAAMgC,EAAK,GAAGC,MAAK,SAACjC,GAAD,OAAiBA,EAAKkC,KAAO9B,EAAK+B,kBAE/DN,MAAK,WACNjB,EAASa,MAMbW,GACAC,YAAW,WACTrB,GAAW,GACXF,GAAU,KACT,QAgCIC,EAAY,aAAe,WE3DtCuB,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.0456f40e.chunk.js","sourcesContent":["import React from 'react';\nimport { Users } from './api';\n\ntype Props = {\n  user: Users;\n};\n\nexport const User: React.FC<Props> = ({ user }) => (\n  <td className=\"users\">\n    {user.name}\n  </td>\n);\n","import React from 'react';\nimport { User } from './User';\nimport { ApdateTodo } from './api';\n\ntype Props = {\n  todo: ApdateTodo;\n};\n\nexport const Todo: React.FC<Props> = ({ todo }) => {\n  const { title, completed, user } = todo;\n\n  return (\n    <>\n      <td className=\"title\">{title}</td>\n      <td className=\"status\">{(completed) ? 'yes' : 'no'}</td>\n      <User user={user} />\n    </>\n  );\n};\n","import React from 'react';\nimport { Todo } from './Todo';\nimport { ApdateTodo } from './api';\n\ntype Props = {\n  todos: ApdateTodo[];\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  return (\n    <>\n      {todos.map(todo => (\n        <tr className=\"todo\">\n          <Todo todo={todo} />\n        </tr>\n      ))}\n    </>\n  );\n};\n","import React, { useState } from 'react';\nimport { TodoList } from './TodoList';\nimport './App.css';\nimport {\n  getUsers, getTodos, ApdateTodo, Users, Todos,\n} from './api';\n\nconst App: React.FC = () => {\n  const [todos, setTodos] = useState<ApdateTodo[]>([]);\n  const [isLoaded, setLoaded] = useState(false);\n  const [isLoading, setLoading] = useState(false);\n\n  const loadAllTodos = () => {\n    let updateTotos: ApdateTodo[] = [];\n\n    Promise.all([getTodos(), getUsers()])\n      .then(data => {\n        updateTotos = data[0].map((todo: Todos) => ({\n          ...todo, user: data[1].find((user: Users) => user.id === todo.userId),\n        }));\n      }).then(() => {\n        setTodos(updateTotos);\n      });\n  };\n\n  const handleLoading = () => {\n    setLoading(true);\n    loadAllTodos();\n    setTimeout(() => {\n      setLoading(false);\n      setLoaded(true);\n    }, 1500);\n  };\n\n  const sortByTodosName = () => {\n    const sortedTodos = [...todos].sort((todoPrew, todoCurr) => (\n      (todoPrew.title).localeCompare(todoCurr.title)\n    ));\n\n    setTodos(sortedTodos);\n  };\n\n  const sortByCompleted = () => {\n    const sortedTodos = [...todos].sort((todo) => (\n      +(!todo.completed)\n    ));\n\n    setTodos(sortedTodos);\n  };\n\n  const sortByUserName = () => {\n    const sortedTodos = [...todos].sort((todoPrew, todoCurr) => (\n      (todoPrew.user.name).localeCompare(todoCurr.user.name)\n    ));\n\n    setTodos(sortedTodos);\n  };\n\n  return (\n    <>\n      <h1>Dynamic list of TODOs</h1>\n      {!isLoaded ? (\n        <button type=\"button\" onClick={handleLoading}>\n          {isLoading ? 'Loading...' : 'Load'}\n        </button>\n      ) : (\n        <table className=\"App\">\n          <tr>\n            <th><a href=\"#/Todos\" onClick={sortByTodosName}>Todos</a></th>\n            <th><a href=\"#/completed\" onClick={sortByCompleted}>Is completed</a></th>\n            <th><a href=\"#/Users\" onClick={sortByUserName}>Users</a></th>\n          </tr>\n          <TodoList todos={todos} />\n        </table>\n      )}\n    </>\n  );\n};\n\nexport default App;\n","export const getUsers = () => {\n  return fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json());\n};\n\nexport const getTodos = () => {\n  return fetch('https://jsonplaceholder.typicode.com/todos')\n    .then(response => response.json());\n};\n\nexport interface Todos {\n  userId: number;\n  id: number;\n  title: string;\n  completed: boolean;\n}\n\nexport interface ApdateTodo {\n  userId: number;\n  id: number;\n  title: string;\n  completed: boolean;\n  user: Users;\n}\n\nexport interface Users {\n  id: number;\n  name: string;\n  username: string;\n  email: string;\n  address: object;\n  phone: string;\n  website: string;\n  company: object;\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}